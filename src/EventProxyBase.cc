#include "EventProxyBase.h"

#include <iostream>

//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
EventProxyBase::EventProxyBase(): fileNames_(), treeName_(""), accumulatedSize_(0){}
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
void EventProxyBase::init(std::vector<std::string> const& iFileNames){

  Int_t cachesize = 10000000; //10 MBytes
  
  fChain = boost::shared_ptr<TChain>(new TChain(treeName_.c_str()));

  for (auto it= iFileNames.begin(), itEnd = iFileNames.end();it!=itEnd; ++it) fChain->Add(it->c_str(),-1);
  accumulatedSize_ = fChain->GetEntries();
  
  fChain->SetCacheSize(cachesize);
  fChain->AddBranchToCache("*",kFALSE);
  fChain->SetDirectory(0);
  fChain->SetParallelUnzip(kFALSE);  
}
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
EventProxyBase::~EventProxyBase(){}
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
EventProxyBase const& EventProxyBase::operator++(){

  fChain->GetEntry(++eventIndex_);

   return *this;
}
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
void EventProxyBase::reloadEvent(){ fChain->GetEntry(eventIndex_); }
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
TFile* EventProxyBase::getTFile() const { return fChain->GetFile(); }
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
TTree* EventProxyBase::getTTree() const { return fChain->GetTree(); }
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
EventProxyBase const& EventProxyBase::toBegin(){

  fChain->GetEntry(0);
  eventIndex_ = 0;
  return *this;
}
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
EventProxyBase const& EventProxyBase::toN(int n){

  fChain->GetEntry(n);
  eventIndex_ = n;
  return *this;
}
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
bool EventProxyBase::atEnd() const{

  return eventIndex_>=accumulatedSize_;
}
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
